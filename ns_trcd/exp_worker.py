import traceback
import sys
import numpy as np
from pyvisa.errors import VisaIOError
from PySide2.QtCore import QObject, Signal, Slot, QTimer
from .common import RawData, POINTS
from .oscilloscope import Oscilloscope


class ExperimentSignals(QObject):
    """Signals that may be generated by the experiment worker.

    new_data : RawData
        Contains the parallel, perpendicular, reference, and shutter traces
        from the oscilloscope. Generated for each acquisition.
    error : (exctype, value, traceback.format_exc())
        Emitted when there is an error in the experiment.
    """

    new_data = Signal(RawData)
    error = Signal(tuple)


class ExperimentWorker(QObject):
    """Worker thread responsible for controlling data acquisition.

    This worker thread communicates with the oscilloscope, setting triggers and
    transfering data when it's ready.

    Notes
    -----
    Currently this only generates dummy data and does not communicate with the
    oscilloscope.
    """

    def __init__(self, instr_name):
        super(ExperimentWorker, self).__init__()
        self.signals = ExperimentSignals()
        self.rng = np.random.default_rng()
        self.timer = QTimer()
        self.timer.setInterval(10)  # in ms
        self.timer.timeout.connect(self.generate)
        self.timer.start()
        try:
            self._scope = Oscilloscope(instr_name)
        except VisaIOError:
            traceback.print_exc()
            exctype, excvalue = sys.exc_info()[:2]
            self.signals.error.emit((exctype, excvalue, traceback.format_exc()))

    @Slot()
    def generate(self):
        """A temporary method that generates dummy data on each iteration of the timer.
        """
        par = self.rng.random(POINTS)
        perp = self.rng.random(POINTS)
        ref = self.rng.random(POINTS)
        shutter = self.rng.random(POINTS)
        data = RawData(par, perp, ref, shutter)
        self.signals.new_data.emit(data)

    def finish(self):
        """A temporary method to stop the timer and cleanup VISA resources.
        """
        self.timer.stop()
        self._scope.cleanup()
